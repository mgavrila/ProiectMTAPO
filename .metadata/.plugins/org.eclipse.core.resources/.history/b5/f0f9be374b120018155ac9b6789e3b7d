package Services;

import java.math.BigDecimal;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;

import Entity.Profesor;
import Entity.Student;
import Entity.Utilizatori;
import Singleton.Singleton;
import Utils.Functions;

public class UtilizatoriService 
{
	public static void main(String[] args)
	{
		//addUtilizator("cm105", "faraparola1", 0);
		//getUtilizatorByID(1);
		//getUtilizatorByUsername("cm105");
		
	}
	
	
	
	public static Utilizatori getUtilizatorByID(int id)
	{
		Utilizatori utilizator = null;
		Session session = null;
		try
		{			
			session = Singleton.getInstance().getNewSession();			
			utilizator = session.get(Utilizatori.class,new BigDecimal(id));
			System.out.println("utilizatorul cautat este: "+utilizator);
		}
		catch (Exception e) 
		{
            e.printStackTrace();
        }
		finally 
		{ 
        	session.close();
        }
		return utilizator;
		
	}
	
	public static Utilizatori getUtilizatorByUsername(String username)
	{
		Utilizatori utilizator = null;
		Session session = null;
		try{			
			session = Singleton.getInstance().getNewSession();			
			DetachedCriteria dc = DetachedCriteria.forClass(Utilizatori.class).add(Restrictions.eq("username" , username));
			utilizator = (Utilizatori)dc.getExecutableCriteria(session).uniqueResult();
			System.out.println("utilizatorul cautat dupa username este: "+utilizator);
		}
		catch (Exception e) 
		{
            e.printStackTrace();
        }
		finally 
		{ 
        	session.close();
        }
		return utilizator;
		
	}
	
	public static boolean addUtilizator(String username, String password,Profesor profesor, int nivel_acces){
		boolean done = false;
		Session session = null;
		Utilizatori utilizator;
		try
		{
			session = Singleton.getInstance().getNewSession();
			session.beginTransaction();
			if(Functions.stringIsNullOrEmpty(password))
			{
				utilizator = new Utilizatori(username,password,profesor,nivel_acces);
				System.out.println("asd");
			}
			else
			{
				utilizator = new Utilizatori(username,EncryptService.getHashOfString(password),profesor,nivel_acces);
				System.out.println("sadasf");
			}
			session.save(utilizator);
			session.getTransaction().commit();
			done = true;
		}
		catch (Exception e) 
		{
            e.printStackTrace();           
        } finally 
		{ 
        	session.close();
        }
		return done;
	}
	
	public static boolean addUtilizator(String username, String password,Student student, int nivel_acces){
		boolean done = false;
		Session session = null;
		Utilizatori utilizator;
		try
		{
			session = Singleton.getInstance().getNewSession();
			session.beginTransaction();
			if(Functions.stringIsNullOrEmpty(password))
			{
				utilizator = new Utilizatori(username,password,student,nivel_acces);
				System.out.println("asd");
			}
			else
			{
				utilizator = new Utilizatori(username,EncryptService.getHashOfString(password),student,nivel_acces);
				System.out.println("sadasf");
			}
			session.save(utilizator);
			session.getTransaction().commit();
			done = true;
		}
		catch (Exception e) 
		{
            e.printStackTrace();           
        } finally 
		{ 
        	session.close();
        }
		return done;
	}
	
	
	public static boolean deleteAllFromUtilizator(){
		Session session = null;
		boolean done = false;
		try{
			session = Singleton.getInstance().getNewSession();
			session.beginTransaction();
			session.createQuery("delete from Utilizator where id <> 0").executeUpdate();
			session.getTransaction().commit();
			done = true;
		}catch(Exception e){
			  e.printStackTrace();   
		}finally{
			session.close();
		}
		return done;
	}
	
	
	public static boolean generateProfessorAccount(Profesor p){
		boolean done = false;
		if(p != null){
				String[] split = p.getNume_profesor().split(" ");
				String username = split[1].charAt(0) + split[0];
				done = addUtilizator(username, null, p, 1);			
		}
		return done;
	}
	
	public static void generateProfessorAccounts(){
		deleteAllFromUtilizator();
		Functions.resetSequence("utilizator_seq");
		List<Profesor> profesori = ProfesorService.getAllFromProfesor();
		for(Profesor p : profesori){
			//if(p.getNume_profesor().equals("admin"))
				//continue;
			generateProfessorAccount(p);
		}
	}
	
	
	public static boolean generateStudentAccount(Student x){
		boolean done = false;
		if(x != null){
				String[] split = x.getNume_student().split(" ");
				String username = split[2].charAt(0) + split[0];
				done = addUtilizator(username, null, x, 2);			
		}
		return done;
	}
	
	public static void generateStudentAccounts(){
		//deleteAllFromUtilizator();
		Functions.resetSequence("utilizator_seq");
		List<Student> studenti = StudentService.getAllFromStudent();
		for(Student x : studenti){
			//if(p.getNume_profesor().equals("admin"))
				//continue;
			generateStudentAccount(x);
		}
	}

}
